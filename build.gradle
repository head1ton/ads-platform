plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

group = 'platform'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt      // asciidoctor
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-mail'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.testcontainers', name: 'testcontainers', version: '1.18.3'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.amqp:spring-rabbit-test'
//    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Auditing
    implementation group: 'org.hibernate.orm', name: 'hibernate-envers', version: '6.2.7.Final'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0'

    // swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.2.0'
    // asciidoctorExt
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    // sonarqube
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3'

    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // 테스트를 위한 lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'io.rest-assured:rest-assured'

    testImplementation 'com.squareup.okhttp3:okhttp:4.11.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.11.0'

    testImplementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    testImplementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // querydsl
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
}

def querydslDir = "src/main/generated"

clean {
    delete file(querydslDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
    sources {
        include("**/docs.adoc")
    }
    baseDirFollowsSourceFile()
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)

        html.destination file("${buildDir}/jacoco/index.html")
        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/config/**',
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '*.config.*',
            ]

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }

        rule {
            enabled = true
            element = 'CLASS'

            excludes = [
                    '*.config.*',
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://127.0.0.1:9000/"
        property "sonar.sources", "src"
        property "sonar.language", "java"
        property "sonar.projectKey", "platform.ads"
        property "sonar.projectName", "platform.ads-prod"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.test.inclusions", "**/*Test.java, **/*Docs.java"
        property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**, **/security/**, **/webconfig/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/jacoco/index.xml"
    }
}